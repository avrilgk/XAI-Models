from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
from sklearn.impute import SimpleImputer
import shap


# Load the dataset
data = pd.read_csv('stock_details_5_years.csv')  # Make sure the path is correct

# Create a binary target variable
data['Target'] = (data['Close'] > data['Open']).astype(int)

# Selecting features and target
features = ['Open', 'High', 'Low', 'Volume', 'Dividends', 'Stock Splits']
X = data[features]
y = data['Target']

# Handling missing values
imputer = SimpleImputer(strategy='median')
X_imputed = imputer.fit_transform(X)
X = pd.DataFrame(X_imputed, columns=features)

# Initialize a dictionary to store predictions for each Company
company_predictions = {}

# Select a few unique company symbols from the dataset for demonstration
unique_company_symbols = data['Company'].unique()[:5]  # Taking the first 5 unique company symbols for simplicity


for symbol in unique_company_symbols:
    # Filter the data for the current company
    current_company_data = data[data['Company'] == symbol].copy()

    # Use 'Open', 'High', 'Low', 'Volume' to predict 'Target'
    X_company = current_company_data[features]
    y_company = current_company_data['Target']

    # Split the data into training and testing sets (80% train, 20% test)
    X_train, X_test, y_train, y_test = train_test_split(X_company, y_company, test_size=0.2, random_state=42)

    # Initialize and train the model
    model = RandomForestClassifier(n_estimators=10, random_state=42)
    model.fit(X_train, y_train)

    # Make predictions
    predictions = model.predict(X_test)

    # Store the predictions for the current company
    company_predictions[symbol] = predictions

    # Create a SHAP TreeExplainer
    explainer = shap.TreeExplainer(model)

    # Calculate SHAP values for the test set
    shap_values = explainer.shap_values(X_test)

    print(f"\nSHAP values for Company {symbol}:")
    # Ensure we are passing the correct shape of SHAP values and feature matrix
    # Here, we choose shap_values[1] assuming it's for the positive class in a binary classification
    # Ensure the dimensions match between SHAP values and features
    shap.summary_plot(shap_values[:, :, 1], X_test.values, feature_names=features)
